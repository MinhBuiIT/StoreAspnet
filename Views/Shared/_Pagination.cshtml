@model StoreWeb.Models.Pagination

@{
    bool flat = true;
    int currentPage = Model.currentPage;
    int countPage = Model.countPage;
    Func<int?, string> generateUrl = Model.generateUrl;

    int? previous = null;
    int? next = null;

    if (currentPage > 1)
    {
        previous = currentPage - 1;
    }
    if (currentPage < countPage)
    {
        next = currentPage + 1;
    }
    int range = 2;
    List<int> pageList = new List<int>();
    pageList.Add(currentPage);
    if (currentPage <= range * 2 + 1)
    {
        for (int i = 1; i <= range; i++)
        {
            if (currentPage - i >= 1)
            {
                pageList.Insert(0, currentPage - i);
            }
            pageList.Add(currentPage + i);
        }
        for (int i = range; i > 0; i--)
        {
            if (!pageList.Contains(i)) pageList.Insert(0, i);
            pageList.Add(countPage - i + 1);
        }
    }
    else if (currentPage > range * 2 + 1 && currentPage < countPage - range * 2)
    {

        for (int i = 1; i <= range; i++)
        {
            if (currentPage - i >= 1)
            {
                pageList.Insert(0, currentPage - i);
            }
            if (currentPage + i <= countPage)
            {
                pageList.Add(currentPage + i);
            }
        }
        for (int i = range; i > 0; i--)
        {
            pageList.Insert(0, i);
            pageList.Add(countPage - i + 1);
        }
    }
    else if (currentPage >= countPage - range * 2)
    {
        for (int i = 1; i <= range; i++)
        {
            if (currentPage + i <= countPage)
            {
                pageList.Add(currentPage + i);
            }
            pageList.Insert(0, currentPage - i);
        }
        for (int i = range; i > 0; i--)
        {
            if (!pageList.Contains(countPage - i + 1)) pageList.Add(countPage - i + 1);
            pageList.Insert(0, i);
        }
    }
}

<nav class="col-12">
    <ul class="pagination  d-flex justify-content-center mt-5">
        @if (previous == null)
        {
            <li class="page-item disabled">
                <a class="rounded">&laquo;</a>
            </li>
        }
        else
        {
            <li class="page-item">
                <a class="rounded" href="@generateUrl(previous)">&laquo;</a>
            </li>
        }

        @for (int i = 1; i <= countPage; i++)
        {
            if (pageList.Contains(i))
            {
                flat = true;
                if (i == currentPage)
                {
                    <li class="page-item active" aria-current="page">
                        <a class="rounded text-white" style="background: #81C408" href="@generateUrl(i)">@i</a>
                    </li>
                }
                else
                {
                    <li class="page-item"><a class="rounded" href="@generateUrl(i)">@i</a></li>
                }
            }
            else
            {
                if (flat == true)
                {
                    flat = false;
                    <li class="page-item"><span class="mx-2">....</span></li>
                }
            }
        }
        @if (next == null)
        {
            <li class="page-item disabled">
                <a class="rounded">&raquo;</a>
            </li>
        }
        else
        {
            <li class="page-item">
                <a class="rounded" href="@generateUrl(next)">&raquo;</a>
            </li>
        }
    </ul>
</nav>

